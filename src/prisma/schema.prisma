datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
// Next-Auth

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  roleId        Int
  address       String?
  neighId       Int

  ordersClient Order[] @relation("client")
  ordersStaff  Order[] @relation("staff")
  accounts      Account[]
  sessions      Session[]

  role Role  @relation(fields: [roleId], references: [id])
  neighborhood Neighborhood  @relation(fields: [neighId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role{
  id    Int       @id @default(autoincrement())
  role    String

  users User[]
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// Entities

model Product {
    id            Int @id @default(autoincrement())
    categoryId    Int
    stock         Int
    name          String
    description   String
    price         Decimal
    image         String?

    itemProduct ItemProduct[]

    category Category   @relation(fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category{
    id      Int  @id @default(autoincrement())
    categoryName    String

    products    Product[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Neighborhood{
    id      Int  @id @default(autoincrement())
    description    String
    active     Boolean
    zone       String

    users   User[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model OrderState{
    id      Int  @id @default(autoincrement())
    state  String

    order Order[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model DeliveryMethod{
    id      Int  @id @default(autoincrement())
    method  Int

    order Order[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Order{
    id      Int  @id @default(autoincrement())
    price  Decimal
    clientId  String
    staffId   String
    orderStateId    Int
    deliveryMethodId    Int
    
    itemProduct ItemProduct[]

    client  User    @relation("client", fields: [clientId], references: [id])
    staff   User    @relation("staff", fields: [staffId], references: [id])
    orderState OrderState  @relation(fields: [orderStateId], references: [id])
    deliveryMethod DeliveryMethod  @relation(fields: [deliveryMethodId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime @updatedAt
}


model ItemProduct{
    orderId     Int
    productId       Int

    order Order  @relation(fields: [orderId], references: [id])
    product Product  @relation(fields: [productId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime @updatedAt

    @@id([orderId, productId])
}